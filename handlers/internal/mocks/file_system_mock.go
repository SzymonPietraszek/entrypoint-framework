// Code generated by MockGen. DO NOT EDIT.
// Source: file_system.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/file_system_mock.go -source=file_system.go -mock_names=Filesystem=MockFilesystem
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fsnotify "github.com/fsnotify/fsnotify"
	filesystem "github.com/k-lb/entrypoint-framework/handlers/internal/filesystem"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// DoesExist mocks base method.
func (m *MockFilesystem) DoesExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoesExist indicates an expected call of DoesExist.
func (mr *MockFilesystemMockRecorder) DoesExist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesExist", reflect.TypeOf((*MockFilesystem)(nil).DoesExist), arg0)
}

// NewFileWatcher mocks base method.
func (m *MockFilesystem) NewFileWatcher(arg0 string, arg1 fsnotify.Op) (filesystem.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFileWatcher", arg0, arg1)
	ret0, _ := ret[0].(filesystem.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFileWatcher indicates an expected call of NewFileWatcher.
func (mr *MockFilesystemMockRecorder) NewFileWatcher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFileWatcher", reflect.TypeOf((*MockFilesystem)(nil).NewFileWatcher), arg0, arg1)
}
